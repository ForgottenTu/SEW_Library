// <auto-generated />
using System;
using Library_DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library_EF.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Library_DB.AItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("AvailableCopies")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BookType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("TEXT");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("BookType").HasValue("AItem");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Library_DB.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Library_DB.Fantasy", b =>
                {
                    b.HasBaseType("Library_DB.AItem");

                    b.HasDiscriminator().HasValue("Fantasy");
                });

            modelBuilder.Entity("Library_DB.Mystery", b =>
                {
                    b.HasBaseType("Library_DB.AItem");

                    b.HasDiscriminator().HasValue("Mystery");
                });

            modelBuilder.Entity("Library_DB.NonFiction", b =>
                {
                    b.HasBaseType("Library_DB.AItem");

                    b.HasDiscriminator().HasValue("NonFiction");
                });

            modelBuilder.Entity("Library_DB.Novel", b =>
                {
                    b.HasBaseType("Library_DB.AItem");

                    b.HasDiscriminator().HasValue("Novel");
                });

            modelBuilder.Entity("Library_DB.SciFi", b =>
                {
                    b.HasBaseType("Library_DB.AItem");

                    b.HasDiscriminator().HasValue("SciFi");
                });

            modelBuilder.Entity("Library_DB.Textbook", b =>
                {
                    b.HasBaseType("Library_DB.AItem");

                    b.HasDiscriminator().HasValue("Textbook");
                });

            modelBuilder.Entity("Library_DB.Author", b =>
                {
                    b.HasBaseType("Library_DB.Person");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Library_DB.Customer", b =>
                {
                    b.HasBaseType("Library_DB.Person");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("TEXT");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Library_DB.Librarian", b =>
                {
                    b.HasBaseType("Library_DB.Person");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Librarians", (string)null);
                });

            modelBuilder.Entity("Library_DB.Author", b =>
                {
                    b.HasOne("Library_DB.Person", null)
                        .WithOne()
                        .HasForeignKey("Library_DB.Author", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library_DB.Customer", b =>
                {
                    b.HasOne("Library_DB.Person", null)
                        .WithOne()
                        .HasForeignKey("Library_DB.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library_DB.Librarian", b =>
                {
                    b.HasOne("Library_DB.Person", null)
                        .WithOne()
                        .HasForeignKey("Library_DB.Librarian", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
